/**
 * Copyright (C) 2006  The University of Kansas
 *
 * [INSERT KU-APPROVED LICENSE TEXT HERE]
 * 
 */
package edu.ku.brc.specify.tests;

/**
 * A 'fake' random number generator.  This should only be used in tests where you need repeatable
 * 'random' number generation.
 *
 * @code_status Alpha
 * @author jstewart
 */
public class FakeRandom
{
    protected final double[] values =
    {
            0.091016888516069820, 0.963004128956944200, 0.398972761073996260, 0.882622995749608600, 
            0.356605680024188240, 0.906496432904061800, 0.382861823026223500, 0.155229990719610740, 
            0.394338204212808300, 0.321828816666380200, 0.892931619231766700, 0.363584929744828500, 
            0.125091616286827080, 0.237291474542115970, 0.675454380439679400, 0.978474336100592000, 
            0.336077666748319850, 0.476315722307029000, 0.963335245113255100, 0.079654447052630580, 
            0.622957516142702400, 0.331393049944255900, 0.908044271773485800, 0.392454937934408000, 
            0.376570678211259900, 0.133873141183207260, 0.528528829572724200, 0.076539182438232210, 
            0.266090358484751400, 0.800603606204802500, 0.943860130961652300, 0.666631191022575300, 
            0.714363487430459500, 0.552632730744433900, 0.153438693309928760, 0.257403552293759200, 
            0.061388855936374110, 0.521703839290419900, 0.781903265754520800, 0.623352289114206800, 
            0.468331691239252100, 0.887027749878321700, 0.015458408949285296, 0.469367942765537060, 
            0.127169208790706260, 0.517828009800593600, 0.422156231978447760, 0.418845164677561600, 
            0.010006010763404460, 0.836410744677498800, 0.470737727771771600, 0.663555313099327000, 
            0.217294057491483780, 0.762019426855962900, 0.340960017222578200, 0.423140092897152500, 
            0.965637213051693700, 0.147492184524172000, 0.052905645908120524, 0.491966324097668400, 
            0.393555671372161500, 0.078747382303340440, 0.033590708687921800, 0.187215622996184220, 
            0.657530606680827500, 0.771380974915941900, 0.986258710108579100, 0.954464477837804300, 
            0.240845055845167580, 0.569166701942258200, 0.331067343223096940, 0.735644175883832200, 
            0.004182242424070282, 0.726008388129384700, 0.545446024557665900, 0.959152147576357100, 
            0.269637710284149200, 0.235901248115939380, 0.448221806831371600, 0.673019084608042900, 
            0.148747255065853500, 0.964716524409527200, 0.843682006695135600, 0.909419334166516700, 
            0.400327607032385000, 0.733132667031404900, 0.970062235804208500, 0.842444885999946500, 
            0.335372276286057040, 0.801792539307922800, 0.881518226851712900, 0.680945588329652800, 
            0.673940608067956200, 0.417775499084776600, 0.233461166745553500, 0.524371662342300400, 
            0.802922630367720200, 0.695729921220811200, 0.938205565925319000, 0.601937076668147900, 
            0.583758524680403300, 0.127519938105904670, 0.811199597069431200, 0.414054995578898000, 
            0.715636026585033900, 0.440998181409937400, 0.637678078060418100, 0.299879819357225850, 
            0.672385014337719700, 0.361523558964057970, 0.055398285191473160, 0.865922623470003900, 
            0.400233512179436370, 0.069101845676742930, 0.271189546687045400, 0.528090026870711500, 
            0.288784616955954140, 0.789533232393580000, 0.907367459447523400, 0.143129010033458900, 
            0.409019466835887750, 0.009710609161405315, 0.208634158135049930, 0.335343271483650840, 
            0.649826281212470200, 0.265218419821378500, 0.430906272410527800, 0.660579284754969900, 
            0.178501365314245200, 0.312641148556664250, 0.480582527049271850, 0.191863413456147660, 
            0.600862437245970700, 0.769497178813860100, 0.776083236694076800, 0.459703576642710200, 
            0.303061022092587450, 0.981472550065460500, 0.863064326457832400, 0.934952697266382000, 
            0.719874988736078200, 0.959636109178081300, 0.530528792649292500, 0.403263085851036540, 
            0.693208216040763100, 0.719576108162647500, 0.047128689664033496, 0.647544228369805400, 
            0.659719511673580900, 0.249905428773695260, 0.665271370703301400, 0.828469254224576200, 
            0.137948118408370070, 0.639341013905544200, 0.725213688968107800, 0.832957910576355400, 
            0.872998742241487200, 0.599570491026854200, 0.532148240307013800, 0.646696967705556700 
    };
    
    protected int index = 0;
    
    public FakeRandom()
    {
        // do nothing
    }
    
    public double next()
    {
        return values[index++];
    }
    
    public int nextInt(int max)
    {
        double v = next();
        return (int)(v*max);
    }
    
    public void reset()
    {
        index = 0;
    }
}
