<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
    
<hibernate-mapping>
    
    <class name="edu.ku.brc.specify.datamodel.GeologicTimePeriod" table="geologictimeperiod"
        lazy="true">
        <meta attribute="class-description" inherit="false"> @hibernate.class
            table="geologictimeperiod" </meta>
        <meta attribute="implements">Treeable</meta>
        <meta attribute="implements">java.awt.datatransfer.Transferable</meta>
        <meta attribute="extra-import">java.awt.datatransfer.DataFlavor</meta>
        <meta attribute="extra-import">java.io.IOException</meta>
        <meta attribute="extra-import">java.awt.datatransfer.UnsupportedFlavorException</meta>
        <meta attribute="class-code">
            <![CDATA[
    		/**
    		 * @return the parent GeologicTimePeriod object
    		 */
    		public Treeable getParentNode()
    		{
    			return getParent();
    		}
    		
    		/**
    		 * @param parent the new parent GeologicTimePeriod object
    		 *
    		 * @throws IllegalArgumentException if treeDef is not instance of GeologicTimePeriod
    		 */
    		public void setParentNode(Treeable parent)
    		{
    			if( !(parent instanceof GeologicTimePeriod) )
    			{
    				throw new IllegalArgumentException("Argument must be an instance of GeologicTimePeriod");
    			}
    			setParent((GeologicTimePeriod)parent);
    		}
    		
    		/**
    		 * @return the parent GeologicTimePeriodTreeDef object
    		 */
    		public TreeDefinitionIface getTreeDef()
    		{
    			return getDefinition();
    		}
    		
    		/**
    		 * @param parent the new GeologicTimePeriodTreeDef object
    		 *
    		 * @throws IllegalArgumentException if treeDef is not instance of GeologicTimePeriodTreeDef
    		 */
    		public void setTreeDef(TreeDefinitionIface treeDef)
    		{
    			if( !(treeDef instanceof GeologicTimePeriodTreeDef) )
    			{
    				throw new IllegalArgumentException("Argument must be an instance of GeologicTimePeriodTreeDef");
    			}
    			
    			setDefinition((GeologicTimePeriodTreeDef)treeDef);
    		}
    		
    		/**
    		 * @param other the Treeable to compare to
    		 */
    		public int compareTo(Treeable other)
    		{
    			return name.compareTo(other.getName());
    		}
    		
    		public DataFlavor[] getTransferDataFlavors()
    		{
    		    DataFlavor[] flavors = new DataFlavor[1];
    		    try
    		    {
    		        flavors[0] = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+";class=edu.ku.brc.specify.datamodel.Treeable");
    		    }
    		    catch( ClassNotFoundException ex )
    		    {
    		        //TODO: What do we want to do here?
    		    }
    		
    		    return flavors;
	        }

        	public boolean isDataFlavorSupported( DataFlavor flavor )
        	{
    		    DataFlavor[] flavors = new DataFlavor[1];
    		    try
    		    {
    		        flavors[0] = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+";class=edu.ku.brc.specify.datamodel.Treeable");
    		    }
    		    catch( ClassNotFoundException ex )
    		    {
    		        //TODO: What do we want to do here?
    		    }

        		for( DataFlavor df: flavors )
        		{
        			if( df.equals(flavor) )
        			{
        				return true;
        			}
        		}
        		
        		return false;
        	}

        	public Object getTransferData( DataFlavor flavor ) throws UnsupportedFlavorException, IOException
        	{
    		    DataFlavor[] flavors = new DataFlavor[1];
    		    try
    		    {
    		        flavors[0] = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType+";class=edu.ku.brc.specify.datamodel.Treeable");
    		    }
    		    catch( ClassNotFoundException ex )
    		    {
    		        //TODO: What do we want to do here?
    		    }

        		if( flavor.equals(flavors[0]) )
        		{
        			return this;
        		}
        		else
        		{
        			return null;
        		}
        	}
    	    ]]>
        </meta>

        <id name="treeId" type="java.lang.Integer" column="TreeID">
            <meta attribute="field-description"> @hibernate.id generator-class="assigned"
                type="java.lang.Integer" column="TreeID" </meta>
            <meta attribute="scope-field">protected</meta>
            <generator class="assigned"/>
        </id>

        <property name="rankId" type="java.lang.Integer" column="RankID" length="10"
            index="IX_GTP_RankId">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="RankID" length="10"
                index="IX_GTP_RankID" </meta>
        </property>

        <property name="name" type="java.lang.String" column="Name" length="64">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="Name" length="64"
            </meta>
        </property>

        <property name="nodeNumber" type="java.lang.Integer" column="NodeNumber" length="10"
            index="IX_GTP_NodeNumber">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="NodeNumber" length="10"
                index="IX_GTP_NodeNumber" </meta>
        </property>

        <property name="highestChildNodeNumber" type="java.lang.Integer"
            column="HighestChildNodeNumber" length="10" index="IX_GTP_NighestChildNodeNumber">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="HighestChildNodeNumber"
                length="10" index="IX_GTP_NighestChildNodeNumber" </meta>
        </property>

        <property name="standard" type="java.lang.String" column="Standard" length="64">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="Standard" length="64"
            </meta>
        </property>

        <property name="age" type="java.lang.Float" column="Age" length="24">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="Age" length="24"
            </meta>
        </property>

        <property name="ageUncertainty" type="java.lang.Float" column="AgeUncertainty" length="24">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="AgeUncertainty"
                length="24" </meta>
        </property>

        <property name="remarks" type="text" column="Remarks">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="Remarks" </meta>
        </property>

        <property name="timestampModified" type="java.sql.Timestamp" column="TimestampModified"
            length="23">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="TimestampModified"
                length="23" </meta>
        </property>

        <property name="timestampCreated" type="java.sql.Timestamp" column="TimestampCreated"
            length="23">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="TimestampCreated"
                length="23" </meta>
        </property>

        <property name="timestampVersion" type="java.sql.Timestamp" column="TimestampVersion"
            length="16">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="TimestampVersion"
                length="16" </meta>
        </property>

        <property name="lastEditedBy" type="java.lang.String" column="LastEditedBy" length="32">
            <meta attribute="scope-field">protected</meta>
            <meta attribute="field-description"> @hibernate.property column="LastEditedBy"
                length="32" </meta>
        </property>

        <!-- Associations -->

        <!-- bi-directional many-to-one association to GeologicTimePeriodTreeDef -->
        <many-to-one name="definition"
            class="edu.ku.brc.specify.datamodel.GeologicTimePeriodTreeDef" not-null="true"
            outer-join="true">
            <meta attribute="field-description"> @hibernate.many-to-one not-null="true"
                @hibernate.column name="TreeDefID" </meta>
            <column name="TreeDefID"/>
        </many-to-one>

        <!-- bi-directional many-to-one association to GeologicTimePeriod -->
        <many-to-one name="parent" class="edu.ku.brc.specify.datamodel.GeologicTimePeriod"
            not-null="true" outer-join="true">
            <meta attribute="field-description"> @hibernate.many-to-one not-null="true"
                @hibernate.column name="ParentID" </meta>
            <column name="ParentID"/>
        </many-to-one>

    </class>

</hibernate-mapping>
